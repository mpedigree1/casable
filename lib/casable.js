// Generated by CoffeeScript 1.9.3
(function() {
  var Cas1ValidationReader, Cas2ValidationReader, CasNoServiceValidationReader, Casable, http, https, url, xmls2js,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  url = require('url');

  xmls2js = require('xml2js');

  http = require('http');

  https = require('https');

  CasNoServiceValidationReader = (function() {
    CasNoServiceValidationReader.prototype.validationUrl = function() {
      return '/serviceAuthorisation';
    };

    function CasNoServiceValidationReader() {}

    CasNoServiceValidationReader.prototype.read = function(body, callback) {
      return xmls2js.parseString(body, function(error, result) {
        var auth, session;
        if ('cas:authenticationFailure' in result['cas:serviceResponse']) {
          return callback(null, "Invalid Ticket or Service");
        } else if ('cas:authenticationSuccess' in result['cas:serviceResponse']) {
          auth = result['cas:serviceResponse']['cas:authenticationSuccess'][0];
          session = {
            id: auth['cas:user'][0],
            name: auth['cas:name'][0],
            surname: auth['cas:surname'][0],
            email: auth['cas:email'][0],
            salt: auth['cas:salt'][0],
            passwordHash: auth['cas:passwordHash'][0],
            group: auth['cas:group'][0]
          };
          return callback(session);
        }
      });
    };

    return CasNoServiceValidationReader;

  })();

  Cas2ValidationReader = (function() {
    Cas2ValidationReader.prototype.validationUrl = function() {
      return '/serviceValidate';
    };

    function Cas2ValidationReader() {}

    Cas2ValidationReader.prototype.read = function(body, callback) {
      return xmls2js.parseString(body, function(error, result) {
        var auth, session;
        if ('cas:authenticationFailure' in result['cas:serviceResponse']) {
          return callback(null, "Invalid Ticket or Service");
        } else if ('cas:authenticationSuccess' in result['cas:serviceResponse']) {
          auth = result['cas:serviceResponse']['cas:authenticationSuccess'][0];
          session = {
            id: auth['cas:user'][0],
            name: auth['cas:name'][0],
            surname: auth['cas:surname'][0],
            email: auth['cas:email'][0],
            salt: auth['cas:salt'][0],
            passwordHash: auth['cas:passwordHash'][0],
            group: auth['cas:group'][0]
          };
          return callback(session);
        }
      });
    };

    return Cas2ValidationReader;

  })();

  Cas1ValidationReader = (function() {
    Cas1ValidationReader.prototype.validationUrl = function() {
      return '/validate';
    };

    function Cas1ValidationReader() {}

    Cas1ValidationReader.prototype.read = function(body, callback) {
      var lines;
      lines = body.split('\n');
      if (lines[0] === 'no') {
        return callback(null, "Invalid Ticket or Service");
      } else if (lines[0] === 'yes' && lines.length >= 2) {
        return callback({
          id: lines[1]
        });
      }
    };

    return Cas1ValidationReader;

  })();

  Casable = (function() {
    function Casable(ssoBaseURL1, config1) {
      this.ssoBaseURL = ssoBaseURL1;
      this.config = config1 != null ? config1 : {};
      this.validate = bind(this.validate, this);
      this.authenticate = bind(this.authenticate, this);
      this.authorise = bind(this.authorise, this);
      this.logout = bind(this.logout, this);
      this.login = bind(this.login, this);
      this.buildServiceUrl = bind(this.buildServiceUrl, this);
      this.parsedBaseUrl = url.parse(this.ssoBaseURL);
      this.logoutDestination = this.config.logoutPath || '/';
      this.casVersion = this.config.casVersion || '2.0';
      this.handleLogoutRequests = this.config.handleLogoutRequests || ['10.8.11.7'];
      this.loginURL = this.ssoBaseURL + '/login';
      this.logoutURL = this.ssoBaseURL + '/logout';
      this.cookieName = this.config.cookieName;
    }

    Casable.prototype.buildServiceUrl = function(req) {
      return url.format({
        host: req.headers.host,
        protocol: req.protocol,
        pathname: req.path
      });
    };

    Casable.prototype.buildLogoutUrl = function(req) {
      return url.format({
        host: req.headers.host,
        protocol: req.protocol,
        pathname: this.logoutURL
      });
    };

    Casable.prototype.login = function(res, req) {
      var redirectURL;
      redirectURL = url.parse(this.loginURL, true);
      redirectURL.query.service = this.buildServiceUrl(req);
      return res.redirect(url.format(redirectURL));
    };

    Casable.prototype.logout = function(req, res) {
      var redirectURL;
      if (req.session != null) {
        req.session.authenticatedUser = null;
      }
      req.authenticatedUser = null;
      redirectURL = url.parse(this.logoutURL);
      return res.redirect(url.format(redirectURL));
    };

    Casable.prototype.authorise = function(req, res, next) {
      var ticket;
      ticket = req.headers['x-ticket'];
      if (ticket != null) {
        return this.validate(req, ticket, (function(_this) {
          return function(user, error) {
            if (user != null) {
              return next();
            } else {
              return res.send(403);
            }
          };
        })(this));
      } else {
        return res.send(403);
      }
    };

    Casable.prototype.authenticate = function(req, res, next) {
      var ref, ticket;
      if (req.path === this.logoutDestination) {
        this.logout(req, res);
        return;
      }
      if ((ref = req.ip, indexOf.call(this.handleLogoutRequests, ref) >= 0) && req.method === 'POST') {
        xmls2js.parseString(req.body.logoutRequest, (function(_this) {
          return function(error, result) {
            req.sessionStore.destroy(result['samlp:LogoutRequest']['samlp:SessionIndex'][0], _this.logout(req, res));
          };
        })(this));
      }
      if (this.cookieName) {
        if (!req.cookies[this.cookieName]) {
          if (req.session != null) {
            req.session.authenticatedUser = null;
          }
          req.authenticatedUser = null;
          this.login(res, req);
          return;
        }
      }
      ticket = req.query.ticket;
      if ((req.session.authenticatedUser == null) && (ticket == null)) {
        return this.login(res, req);
      } else if (ticket != null) {
        return this.validate(req, ticket, (function(_this) {
          return function(user, error) {
            if (user == null) {
              return _this.login(res, req);
            } else {
              user.ticket = ticket;
              req.session.authenticatedUser = user;
              req.authenticatedUser = user;
              req.sessionStore.set(ticket, req.session);
              return next();
            }
          };
        })(this));
      } else {
        return req.sessionStore.get(req.session.authenticatedUser.ticket, (function(_this) {
          return function(error, is_login) {
            if (is_login != null) {
              return next();
            } else {
              req.session.authenticatedUser = null;
              return _this.login(res, req);
            }
          };
        })(this));
      }
    };

    Casable.prototype.validate = function(req, ticket, callback) {
      var httpGet, reader, validateRequest, validateUrl;
      reader = (function() {
        switch (false) {
          case this.casVersion !== "2.0":
            return new Cas2ValidationReader();
          case this.casVersion !== "SERVICE":
            return new CasNoServiceValidationReader();
          default:
            return new Cas1ValidationReader();
        }
      }).call(this);
      delete req.query.ticket;
      validateUrl = url.format({
        pathname: "" + (reader.validationUrl()),
        query: {
          ticket: ticket,
          service: this.buildServiceUrl(req)
        }
      });
      httpGet = function(res) {
        var body;
        res.setEncoding('utf8');
        body = '';
        res.on('data', function(chunk) {
          return body += chunk;
        });
        return res.on('end', function() {
          return reader.read(body, callback);
        });
      };
      if (this.parsedBaseUrl.protocol === 'https:') {
        validateRequest = https.get("" + this.parsedBaseUrl.href + validateUrl, httpGet);
      } else {
        validateRequest = http.get("" + this.parsedBaseUrl.href + validateUrl, httpGet);
      }
      return validateRequest.on('error', function(error) {
        return callback(null, error);
      });
    };

    return Casable;

  })();

  exports.authentication = function(ssoBaseURL, config) {
    if (config == null) {
      config = {};
    }
    return new Casable(ssoBaseURL, config).authenticate;
  };

  exports.authorisation = function(ssoBaseURL, config) {
    if (config == null) {
      config = {};
    }
    return new Casable(ssoBaseURL, config).authorise;
  };

}).call(this);
